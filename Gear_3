# Methode de Gear

"""
Created on Tue Oct 16 14:45:59 2018
@author: Sara
"""

import numpy as np
import scipy as sc
import math as m
import matplotlib.pyplot as plot
from scipy.optimize import newton 

def real(t):
    return np.exp(t / 2 - np.sin(2 * t) / 4)

def function(t,y):
    return y * (np.sin(t) ** 2)

def fGear(y,sol,tStep,t,function):
    return (18./11.)*sol[-1]-(9./11.)*sol[-2]+(2./11.)*sol[-3]+(6./11.)*tStep*function(t,y)-y

# Calcul des coefs pour RK
def coefRK(ord, f, ti, yi):
        if ord == 1:
            k1 = f(ti,yi)
            return k1
        
def MGear_3(orderGear, orderRK, f, y0, t0, tEnd, tStep): 
    temps = [t0]
    sol = [y0]
    t = t0
    yact = y0
    for i in range(orderGear):   
        # Premieres iterations calculees avec RK
        yact = yact + coefRK(orderRK, f, t, yact)*tStep
        t += tStep
        sol.append(yact)
        temps.append(t)
    while t < tEnd:
        t += tStep
        yact = newton(fGear, sol[-1], args=(sol,tStep,t,function))
        sol.append(yact)
        temps.append(t)
    return temps, sol

t, sol = MGear_3(3, 1, function, 1, 0, 4, 0.05)
print(t)
print(sol)

yreal = []
j = 0
for element in t:
    yreal.append(real(element))
    j += 1
print(yreal)

fig = plot.figure()
plot.plot(t,sol,'ro')
plot.plot(t,yreal)
